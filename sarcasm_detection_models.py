# -*- coding: utf-8 -*-
"""Sarcasm_detection_models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h5Qs-WVGhbOqwg0vQeMyeUWcZ4W0GYwn

# Sarcasm Detection in YouTube Comments using Transformers

This notebook contains the code used for the Transformer model performances in detecting Sarcasm in YouTube comments

### Import libraries and requirements
"""

!pip install emoji==0.6.0

!pip install -U datasets numpy

import pandas as pd
import torch
import torch.nn as nn
import numpy as np
from datasets import Dataset
from transformers import (
    AutoTokenizer,
    AutoModelForSequenceClassification,
    TrainingArguments,
    Trainer,
    EarlyStoppingCallback
)
from sklearn.metrics import (
    accuracy_score,
    f1_score,
    precision_score,
    recall_score,
    confusion_matrix,
    classification_report,
    precision_recall_fscore_support
)
from sklearn.model_selection import train_test_split
import torch.nn.functional as F

"""## Dataset Preparation"""

# Load dataset
df = pd.read_csv("/content/youtube_comments2.csv", quotechar='"')

# Convert boolean labels to integers
df['sarcastic'] = df['sarcastic'].astype(int)
df = df[['video_id','comment', 'sarcastic']].dropna()

"""Data statistics"""

# Sarcasm percentage per video
sarcasm_stats = (df.groupby('video_id')['sarcastic'].agg(['count', 'sum']).rename(columns={'count' : 'total_comments',
                                                                              'sum' : 'sarcastic_comments'})
)

sarcasm_stats['sarcasm_percentage'] = (100 * sarcasm_stats['sarcastic_comments'] / sarcasm_stats['total_comments']).round(2)
print(sarcasm_stats)

# Get average sarcastic percentage
avg = sarcasm_stats['sarcasm_percentage'].mean()
print(f"Average Sarcasm Percentage: {avg}%")

"""## Model Performance without Context Integration

### BERTweet
"""

# Train/test split
train_df, test_df = train_test_split(df, test_size=0.15, stratify=df['sarcastic'], random_state=123)

# Convert to Hugging Face Datasets
train_ds = Dataset.from_pandas(train_df.reset_index(drop=True))
test_ds = Dataset.from_pandas(test_df.reset_index(drop=True))

# Load tokenizer - switched to RoBERTa
model_name = "vinai/bertweet-base"
tokenizer = AutoTokenizer.from_pretrained(model_name, use_fast=False)

# Tokenization
def tokenize(batch):
    return tokenizer(batch['comment'], truncation=True, padding="max_length", max_length=128)

train_ds = train_ds.map(tokenize, batched=True)
test_ds = test_ds.map(tokenize, batched=True)

# Rename columns
train_ds = train_ds.rename_column("sarcastic", "labels")
test_ds = test_ds.rename_column("sarcastic", "labels")
train_ds.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])
test_ds.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])

# Calculate improved class weights
neg_count = (train_df['sarcastic'] == 0).sum()
pos_count = (train_df['sarcastic'] == 1).sum()
total = neg_count + pos_count
smoothing = 0.1  # Prevents extreme weights
pos_weight = (total - pos_count + smoothing) / (pos_count + smoothing)

# Load model
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)

# Move to device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)

# Custom Focal Loss implementation
class FocalLoss(nn.Module):
    def __init__(self, alpha=pos_weight, gamma=2.0):
        super().__init__()
        self.alpha = alpha
        self.gamma = gamma

    def forward(self, inputs, targets):
        ce_loss = F.cross_entropy(inputs, targets, reduction='none')
        pt = torch.exp(-ce_loss)
        loss = self.alpha * (1-pt)**self.gamma * ce_loss
        return loss.mean()

# Initialize loss with class weights
loss_fn = FocalLoss(alpha=pos_weight)

# Custom Trainer
class WeightedTrainer(Trainer):
    def __init__(self, *args, loss_fn=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.loss_fn = loss_fn

    def compute_loss(self, model, inputs, return_outputs=False, **kwargs):
        labels = inputs.pop("labels")
        outputs = model(**inputs)
        logits = outputs.logits
        loss = self.loss_fn(logits, labels)
        return (loss, outputs) if return_outputs else loss

# Metrics with focus on sarcastic class
def compute_metrics(pred):
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)
    return {
        "accuracy": accuracy_score(labels, preds),
        "precision_1": precision_score(labels, preds, pos_label=1, zero_division=0),
        "recall_1": recall_score(labels, preds, pos_label=1, zero_division=0),
        "f1_1": f1_score(labels, preds, pos_label=1, zero_division=0),
    }

# Improved training arguments
training_args = TrainingArguments(
    output_dir="./bertweet_model",
    eval_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    warmup_ratio=0.1,
    lr_scheduler_type="linear",
    per_device_train_batch_size=32,
    per_device_eval_batch_size=128,
    num_train_epochs=10,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=50,
    load_best_model_at_end=True,
    metric_for_best_model="eval_f1_1",
    greater_is_better=True,
)

# Trainer
trainer = WeightedTrainer(
    model=model,
    args=training_args,
    train_dataset=train_ds,
    eval_dataset=test_ds,
    compute_metrics=compute_metrics,
    loss_fn=loss_fn,
)

# Train
trainer.train()

# Final evaluation
eval_results = trainer.evaluate()
print(eval_results)

# Detailed analysis
from sklearn.metrics import classification_report
preds = trainer.predict(test_ds)
y_true = preds.label_ids
y_pred = np.argmax(preds.predictions, axis=1)
print("\nBERTweet Classification Report:")
print(classification_report(y_true, y_pred, target_names=["Not Sarcastic", "Sarcastic"]))

# Confusion Matrix
cm = confusion_matrix(y_true, y_pred)
print("\nConfusion Matrix:")
print(cm)

"""### RoBERTa"""

# Train/test split
train_df, test_df = train_test_split(df, test_size=0.15, stratify=df['sarcastic'], random_state=123)

# Convert to Hugging Face Datasets
train_ds = Dataset.from_pandas(train_df.reset_index(drop=True))
test_ds = Dataset.from_pandas(test_df.reset_index(drop=True))

# Load tokenizer - switched to RoBERTa
model_name = "roberta-base"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Tokenization
def tokenize(batch):
    return tokenizer(batch['comment'], truncation=True, padding="max_length", max_length=128)

train_ds = train_ds.map(tokenize, batched=True)
test_ds = test_ds.map(tokenize, batched=True)

# Rename columns
train_ds = train_ds.rename_column("sarcastic", "labels")
test_ds = test_ds.rename_column("sarcastic", "labels")
train_ds.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])
test_ds.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])

# Calculate improved class weights
neg_count = (train_df['sarcastic'] == 0).sum()
pos_count = (train_df['sarcastic'] == 1).sum()
total = neg_count + pos_count
smoothing = 0.1  # Prevents extreme weights
pos_weight = (total - pos_count + smoothing) / (pos_count + smoothing)

# Load model
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)

# Move to device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)

# Custom Focal Loss implementation
class FocalLoss(nn.Module):
    def __init__(self, alpha=pos_weight, gamma=2.0):
        super().__init__()
        self.alpha = alpha
        self.gamma = gamma

    def forward(self, inputs, targets):
        ce_loss = F.cross_entropy(inputs, targets, reduction='none')
        pt = torch.exp(-ce_loss)
        loss = self.alpha * (1-pt)**self.gamma * ce_loss
        return loss.mean()

# Initialize loss with class weights
loss_fn = FocalLoss(alpha=pos_weight)

# Custom Trainer
class WeightedTrainer(Trainer):
    def __init__(self, *args, loss_fn=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.loss_fn = loss_fn

    def compute_loss(self, model, inputs, return_outputs=False, **kwargs):
        labels = inputs.pop("labels")
        outputs = model(**inputs)
        logits = outputs.logits
        loss = self.loss_fn(logits, labels)
        return (loss, outputs) if return_outputs else loss

# Metrics with focus on sarcastic class
def compute_metrics(pred):
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)
    return {
        "accuracy": accuracy_score(labels, preds),
        "precision_1": precision_score(labels, preds, pos_label=1, zero_division=0),
        "recall_1": recall_score(labels, preds, pos_label=1, zero_division=0),
        "f1_1": f1_score(labels, preds, pos_label=1, zero_division=0),
    }

# improved training arguments
training_args = TrainingArguments(
    output_dir="./Roberta_model",
    eval_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    warmup_ratio=0.1,
    lr_scheduler_type="linear",
    per_device_train_batch_size=32,
    per_device_eval_batch_size=128,
    num_train_epochs=10,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=50,
    load_best_model_at_end=True,
    metric_for_best_model="eval_f1_1",
    greater_is_better=True,
)

# Trainer
trainer = WeightedTrainer(
    model=model,
    args=training_args,
    train_dataset=train_ds,
    eval_dataset=test_ds,
    compute_metrics=compute_metrics,
    loss_fn=loss_fn,
    callbacks=[EarlyStoppingCallback(early_stopping_patience=3)]
)

# Train
trainer.train()

# Final evaluation
eval_results = trainer.evaluate()
print(eval_results)

# Detailed analysis
from sklearn.metrics import classification_report
preds = trainer.predict(test_ds)
y_true = preds.label_ids
y_pred = np.argmax(preds.predictions, axis=1)
print("\nRoBERTa Classification Report:")
print(classification_report(y_true, y_pred, target_names=["Not Sarcastic", "Sarcastic"]))

# Confusion Matrix
cm = confusion_matrix(y_true, y_pred)
print("\nConfusion Matrix:")
print(cm)

"""## Model Performance with Context Integration

Format model input : [Video Context] [SEP] [User Comment]

### BERTweet
"""

# Context per video
video_contexts = {
    "4VGd-pvSc0w": "A woman is addicted to drinking paint.",
    "a1rpr0Afhfg": "A woman is addicted to eating soap.",
    "Ryq4lLnTmog": "A woman is addicted to eating mattresses.",
    "eBfw5NMgizU": "A woman is addicted to bathing in bleach.",
}

# Add video context and combined input
df['video_context'] = df['video_id'].map(video_contexts)
df['combined_text'] = df['video_context'] + " [SEP] " + df['comment']


# Train/test split
train_df, test_df = train_test_split(df, test_size=0.15, stratify=df['sarcastic'], random_state=123)

# Convert to Hugging Face Datasets
train_ds = Dataset.from_pandas(train_df.reset_index(drop=True))
test_ds = Dataset.from_pandas(test_df.reset_index(drop=True))

# Load tokenizer - switched to RoBERTa
model_name = "vinai/bertweet-base"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Tokenization
def tokenize(batch):
    return tokenizer(batch['combined_text'], truncation=True, padding="max_length", max_length=128)

train_ds = train_ds.map(tokenize, batched=True)
test_ds = test_ds.map(tokenize, batched=True)

train_ds = train_ds.rename_column("sarcastic", "labels")
test_ds = test_ds.rename_column("sarcastic", "labels")


train_ds.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])
test_ds.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])

# Calculate improved class weights
neg_count = (train_df['sarcastic'] == 0).sum()
pos_count = (train_df['sarcastic'] == 1).sum()
total = neg_count + pos_count
smoothing = 0.1  # Prevents extreme weights
pos_weight = (total - pos_count + smoothing) / (pos_count + smoothing)

# Load model
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)

# Move to device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)

# Custom Focal Loss implementation
class FocalLoss(nn.Module):
    def __init__(self, alpha=pos_weight, gamma=1.0):
        super().__init__()
        self.alpha = alpha
        self.gamma = gamma

    def forward(self, inputs, targets):
        ce_loss = F.cross_entropy(inputs, targets, reduction='none')
        pt = torch.exp(-ce_loss)
        loss = self.alpha * (1-pt)**self.gamma * ce_loss
        return loss.mean()

# Initialize loss with class weights
loss_fn = FocalLoss(alpha=pos_weight)

# Custom Trainer
class WeightedTrainer(Trainer):
    def __init__(self, *args, loss_fn=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.loss_fn = loss_fn

    def compute_loss(self, model, inputs, return_outputs=False, **kwargs):
        labels = inputs.pop("labels")
        outputs = model(**inputs)
        logits = outputs.logits
        loss = self.loss_fn(logits, labels)
        return (loss, outputs) if return_outputs else loss

# Metrics with focus on sarcastic class
def compute_metrics(pred):
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)
    return {
        "accuracy": accuracy_score(labels, preds),
        "precision_1": precision_score(labels, preds, pos_label=1, zero_division=0),
        "recall_1": recall_score(labels, preds, pos_label=1, zero_division=0),
        "f1_1": f1_score(labels, preds, pos_label=1, zero_division=0),
    }

# Improved training arguments
training_args = TrainingArguments(
    output_dir="./bertweet_video_context_model90",
    eval_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    warmup_ratio=0.1,
    lr_scheduler_type="linear",
    per_device_train_batch_size=32,
    per_device_eval_batch_size=128,
    num_train_epochs=10,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=50,
    load_best_model_at_end=True,
    metric_for_best_model="eval_f1_1",
    greater_is_better=True,
)

# Trainer
trainer = WeightedTrainer(
    model=model,
    args=training_args,
    train_dataset=train_ds,
    eval_dataset=test_ds,
    compute_metrics=compute_metrics,
    loss_fn=loss_fn,
)

# Train
trainer.train()

# Final evaluation
eval_results = trainer.evaluate()
print(eval_results)

# Detailed analysis
from sklearn.metrics import classification_report
preds = trainer.predict(test_ds)
y_true = preds.label_ids
y_pred = np.argmax(preds.predictions, axis=1)
print("\nBERTweet + Context Classification Report:")
print(classification_report(y_true, y_pred, target_names=["Not Sarcastic", "Sarcastic"]))

# Confusion Matrix
cm = confusion_matrix(y_true, y_pred)
print("\nConfusion Matrix:")
print(cm)

"""### RoBERTa"""

# Context per video
video_contexts = {
    "4VGd-pvSc0w": "Video shows a woman Heather who is addicted to drinking paint.",
    "a1rpr0Afhfg": "Video shows a woman Tempestt who is addicted to eating soap.",
    "Ryq4lLnTmog": "Video shows a woman Jennifer who is addicted to eating mattresses.",
    "eBfw5NMgizU": "Video shows a woman Gloria who is addicted to bathing in bleach.",
}

# Add video context and combined input
df['video_context'] = df['video_id'].map(video_contexts)
df['combined_text'] = df['video_context'] + " [SEP] " + df['comment']


# Train/test split
train_df, test_df = train_test_split(df, test_size=0.15, stratify=df['sarcastic'], random_state=123)

# Convert to Hugging Face Datasets
train_ds = Dataset.from_pandas(train_df.reset_index(drop=True))
test_ds = Dataset.from_pandas(test_df.reset_index(drop=True))

# Load tokenizer - switched to RoBERTa
model_name = "roberta-base"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Tokenization
def tokenize(batch):
    return tokenizer(batch['combined_text'], truncation=True, padding="max_length", max_length=128)

train_ds = train_ds.map(tokenize, batched=True)
test_ds = test_ds.map(tokenize, batched=True)

train_ds = train_ds.rename_column("sarcastic", "labels")
test_ds = test_ds.rename_column("sarcastic", "labels")


train_ds.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])
test_ds.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])

# Calculate improved class weights
neg_count = (train_df['sarcastic'] == 0).sum()
pos_count = (train_df['sarcastic'] == 1).sum()
total = neg_count + pos_count
smoothing = 0.1  # Prevents extreme weights
pos_weight = (total - pos_count + smoothing) / (pos_count + smoothing)

# Load model
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)

# Move to device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)

# Custom Focal Loss implementation
class FocalLoss(nn.Module):
    def __init__(self, alpha=pos_weight, gamma=2.0):
        super().__init__()
        self.alpha = alpha
        self.gamma = gamma

    def forward(self, inputs, targets):
        ce_loss = F.cross_entropy(inputs, targets, reduction='none')
        pt = torch.exp(-ce_loss)
        loss = self.alpha * (1-pt)**self.gamma * ce_loss
        return loss.mean()

# Initialize loss with class weights
loss_fn = FocalLoss(alpha=pos_weight)

# Custom Trainer
class WeightedTrainer(Trainer):
    def __init__(self, *args, loss_fn=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.loss_fn = loss_fn

    def compute_loss(self, model, inputs, return_outputs=False, **kwargs):
        labels = inputs.pop("labels")
        outputs = model(**inputs)
        logits = outputs.logits
        loss = self.loss_fn(logits, labels)
        return (loss, outputs) if return_outputs else loss

# Metrics with focus on sarcastic class
def compute_metrics(pred):
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)
    return {
        "accuracy": accuracy_score(labels, preds),
        "precision_1": precision_score(labels, preds, pos_label=1, zero_division=0),
        "recall_1": recall_score(labels, preds, pos_label=1, zero_division=0),
        "f1_1": f1_score(labels, preds, pos_label=1, zero_division=0),
    }

# Improved training arguments
training_args = TrainingArguments(
    output_dir="./roberta_video_context_model",
    eval_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    warmup_ratio=0.1,
    lr_scheduler_type="linear",
    per_device_train_batch_size=32,
    per_device_eval_batch_size=128,
    num_train_epochs=10,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=50,
    load_best_model_at_end=True,
    metric_for_best_model="eval_f1_1",
    greater_is_better=True,
)

# Trainer
trainer = WeightedTrainer(
    model=model,
    args=training_args,
    train_dataset=train_ds,
    eval_dataset=test_ds,
    compute_metrics=compute_metrics,
    loss_fn=loss_fn,
)

# Train
trainer.train()

# Final evaluation
eval_results = trainer.evaluate()
print(eval_results)

# Detailed analysis
from sklearn.metrics import classification_report
preds = trainer.predict(test_ds)
y_true = preds.label_ids
y_pred = np.argmax(preds.predictions, axis=1)
print("\nRoBERTa + Context Classification Report:")
print(classification_report(y_true, y_pred, target_names=["Not Sarcastic", "Sarcastic"]))

# Confusion Matrix
cm = confusion_matrix(y_true, y_pred)
print("\nConfusion Matrix:")
print(cm)